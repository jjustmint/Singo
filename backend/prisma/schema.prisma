generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int         @id(map: "user_id") @default(autoincrement())
  username  String      @unique @db.VarChar(50)
  password  String
  user_key  String?     @db.VarChar(50)
  recording recording[]
}

model song {
  song_id          Int                @id @default(autoincrement())
  title            String
  key_signature    String             @db.VarChar(50)
  audio_data       Bytes
  is_original      Boolean?           @default(false)
  parent_song_id   Int?
  vocal_only       Bytes?
  recording        recording[]
  song             song?              @relation("songTosong", fields: [parent_song_id], references: [song_id], onDelete: Cascade, onUpdate: NoAction)
  other_song       song[]             @relation("songTosong")
  songaudioversion songaudioversion[]
}

model songaudioversion {
  version_id   Int    @id @default(autoincrement())
  song_id      Int?
  version_type String @db.VarChar(50)
  audio_data   Bytes
  song         song?  @relation(fields: [song_id], references: [song_id], onDelete: Cascade, onUpdate: NoAction)
}

model missedpart {
  missed_id       Int        @id @default(autoincrement())
  recording_id    Int?
  timestamp_start Float?
  timestamp_end   Float?
  lyric_snippet   String?
  recording       recording? @relation(fields: [recording_id], references: [recording_id], onDelete: Cascade, onUpdate: NoAction)
}

model recording {
  recording_id        Int          @id @default(autoincrement())
  user_id             Int?
  song_id             Int?
  detected_key        String?      @db.VarChar(50)
  adjusted_key        String?      @db.VarChar(50)
  adjusted_audio_data Bytes?
  user_audio_data     Bytes
  accuracy_score      Float?
  created_at          DateTime?    @default(now()) @db.Timestamp(6)
  missedpart          missedpart[]
  song                song?        @relation(fields: [song_id], references: [song_id], onUpdate: NoAction)
  User                User?        @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
